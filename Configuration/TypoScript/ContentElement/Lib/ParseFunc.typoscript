# Creates persistent ParseFunc setup for non-HTML content.
# From EXT. Fluid Styled Content
lib.parseFunc {
  makelinks = 1
  makelinks {
    http {
      keep = path
      extTarget = _blank
    }
    mailto {
      keep = path
    }
  }
  tags {
    link = TEXT
    link {
      current = 1
      typolink {
        parameter.data = parameters : allParams
        extTarget = _blank
      }
      parseFunc.constants = 1
    }
    a = TEXT
    a {
      current = 1
      typolink {
        parameter.data = parameters:href
        title.data = parameters:title
        ATagParams.data = parameters:allParams
        # the target attribute takes precedence over config.intTarget
        target.ifEmpty.data = parameters:target
        # the target attribute takes precedence over the constant (styles.content.links.extTarget)
        # which takes precedence over config.extTarget
        extTarget.ifEmpty < config.extTarget
        extTarget.ifEmpty.override = _blank
        extTarget.override.data = parameters:target
      }
    }
  }
  allowTags := addToList(a, abbr, acronym, address, article, aside)
  allowTags := addToList(b, bdo, big, blockquote, br)
  allowTags := addToList(caption, center, cite, code, col, colgroup)
  allowTags := addToList(dd, del, dfn, dl, div, dt)
  allowTags := addToList(em, font, footer)
  allowTags := addToList(header, h1, h2, h3, h4, h5, h6, hr)
  allowTags := addToList(i, img, ins, kbd, label, li, link, meta, nav, ol, p, pre, q)
  allowTags := addToList(s, samp, sdfield, section, small, span, strike, strong, style, sub, sup)
  allowTags := addToList(table, thead, tbody, tfoot, td, th, tr, title, tt)
  allowTags := addToList(u, ul, var)
  denyTags = *
  sword = <span class="ce-sword">|</span>
  constants = 1
  nonTypoTagStdWrap {
    HTMLparser = 1
    HTMLparser {
      keepNonMatchedTags = 1
      htmlSpecialChars = 2
    }
  }
}


# Creates persistent ParseFunc setup for RTE content (which is mainly HTML) based on the "default" transformation.
lib.parseFunc_RTE < lib.parseFunc
lib.parseFunc_RTE {
  # Processing <ol>, <ul> and <table> blocks separately
  externalBlocks = article, aside, blockquote, div, dd, dl, footer, header, nav, ol, section, table, ul, pre
  externalBlocks {
    ol {
      stripNL = 1
      stdWrap.parseFunc = < lib.parseFunc
    }
    ul {
      stripNL = 1
      stdWrap.parseFunc = < lib.parseFunc
    }
    pre {
      stdWrap.parseFunc < lib.parseFunc
    }
    table {
      stripNL = 1
      stdWrap {
        HTMLparser = 1
        HTMLparser {
          tags.table.fixAttrib.class {
            default = contenttable
            always = 1
            list = contenttable
          }
          keepNonMatchedTags = 1
        }
      }
      HTMLtableCells = 1
      HTMLtableCells {
        # Recursive call to self but without wrapping non-wrapped cell content
        default.stdWrap {
          parseFunc = < lib.parseFunc_RTE
          parseFunc.nonTypoTagStdWrap.encapsLines {
            nonWrappedTag =
            innerStdWrap_all.ifBlank =
          }
        }
        addChr10BetweenParagraphs = 1
      }
    }
    div {
      stripNL = 1
      callRecursive = 1
    }
    article < .div
    aside < .div
    blockquote < .div
    footer < .div
    header < .div
    nav < .div
    section < .div
    dl < .div
    dd < .div
  }
  nonTypoTagStdWrap {
    encapsLines {
      encapsTagList = p,pre,h1,h2,h3,h4,h5,h6,hr,dt
      remapTag.DIV = P
      nonWrappedTag = P
      innerStdWrap_all.ifBlank = &nbsp;
    }
    HTMLparser = 1
    HTMLparser {
      keepNonMatchedTags = 1
      htmlSpecialChars = 2
    }
  }
}
